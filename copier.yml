custom_install:
    help: Would you like to use simple (default tooling) or customized installation?
    type: bool
    default: customized
    choices:
        customized: true
        simple: false

project_name:
    type: str
    help: What is the name of your project?
    default: example_project
    validator: >-
        {% if not (project_name | regex_search('^[a-z][a-z0-9\_\-]+$')) %}
        Must use a lowercase letter followed by one or more of (a-z, 0-9, _, -).
        {% endif %}

package_name:
    type: str
    help: What is your python package name?
    default: example_package
    validator: >-
        {% if not (package_name | regex_search('^[a-z][a-z0-9\_]+$')) %}
        Must use a lowercase letter followed by one or more of (a-z, 0-9, _).
        {% endif %}

author_name:
    type: str
    help: What is the name of the code author? (Can be a person or organization)
    default: Your Name

author_email:
    type: str
    help: Code author's preferred email address?
    default: name@you.com

project_license:
    help: What license would you like to use?
    type: str
    default: MIT
    choices:
        MIT: MIT
        BSD: BSD
        none: none

preferred_linter:
    help: What tooling would you like to use to enforce code style?
    type: str
    default: pylint
    choices:
        pylint: pylint
        black: black
        none: none
    when: "{{ custom_install }}"

use_isort:
    help: Do you want to use isort to maintain a specific ordering for module imports?
    type: bool
    default: yes
    choices:
        yes: true
        no: false
    when: "{{ custom_install }}"

mypy_type_checking:
    help: Would you like to include mypy to perform static type checking for type hints?
    type: str
    default: none
    choices:
        No type checking: none
        Add basic type checking for code that has type hints: basic
        Add strict type checking to enforce that type hints are used: strict
    when: "{{ custom_install }}"

create_example_module:
    help: Do you want to create some example module code?
    type: bool
    default: yes
    choices:
        yes: true
        no: false
    when: "{{ custom_install }}"

include_notebooks:
    help: Do you want to include rendered notebooks in your documentation?
    type: bool
    default: yes
    choices:
        yes: true
        no: false
    when: "{{ custom_install }}"

use_gitlfs:
    help: Do you want to add a .gitattributes with entries for git-lfs (see https://lincc-ppt.readthedocs.io/en/latest/practices/git-lfs.html)?
    type: str
    default: none
    choices:
        maybe later: none
        yes .gitattributes with example entries disabled: disabled
        yes .gitattributes with example entries enabled: enabled
    when: "{{ custom_install }}"

###
# Below this line are Copier configuration options.
###

# Subdirectory that contains the python-project-template. Allows template metadata to be separated from the template.
_subdirectory: python-project-template

_skip_if_exists:
    - README.md
    - .gitattributes

# Tasks to execute after generating or updating a project.
_tasks:
    - "git init --initial-branch=main"
