repos:

    # Clear output from jupyter notebooks so that only the input cells are committed.
  - repo: local
    hooks:
      - id: jupyter-nb-clear-output
        name: jupyter-nb-clear-output
        description: Clear output from Jupyter notebooks.
        files: \.ipynb$
        stages: [commit]
        language: system
        entry: jupyter nbconvert --ClearOutputPreprocessor.enabled=True --inplace

    # Run unit tests, verify that they pass. Note that coverage is run against
    # the ./src directory here because that is what will be committed. In the 
    # github workflow script, the coverage is run against the installed package
    # and uploaded to Codecov by calling pytest like so:
    # `python -m pytest --cov=<package_name> --cov-report=xml`
  - repo: local
    hooks:
      - id: pytest-check
        name: pytest-check
        description: Run unit tests with pytest.
        entry: python -m pytest --cov=./src --cov-report=html
        language: system
        pass_filenames: false
        always_run: true

    # prevents committing directly branches named 'main' and 'master'.
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: no-commit-to-branch
        name: Don't commit to main or master branch
        description: Prevent the user from committing directly to the primary branch.
      - id: check-added-large-files
        name: Check for large files
        description: Prevent the user from committing very large files.
        args: ['--maxkb=500']

    # verify that pyproject.toml is well formed
  - repo: https://github.com/abravalheri/validate-pyproject
    rev: v0.12.1
    hooks:
      - id: validate-pyproject
        name: Validate syntax of pyproject.toml
        description: Verify that pyproject.toml adheres to the established schema.
{% if use_isort == true %}
    # Automatically sort the imports used in .py files
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: isort (python files in src/ and tests/)
        description: Sort and organize imports in .py files.
        types: [python]
        files: ^(src|tests)/
{% endif %}
{% if preferred_linter == 'pylint' %}
    # Analyze the code style and report code that doesn't adhere.
  - repo: local
    hooks:
      - id: pylint
        name: pylint (python files in src/ and tests/)
        entry: pylint
        language: system
        types: [python]
        files: ^(src|tests)/
        args:
          [
            "-rn", # Only display messages
            "-sn", # Don't display the score
          ]
{% elif preferred_linter == 'black' %}
    # Analyze the code style and report code that doesn't adhere.
  - repo: https://github.com/psf/black
    rev: 23.1.0
    hooks:
      - id: black
        types: [python]
        files: ^(src|tests)/
        # It is recommended to specify the latest version of Python
        # supported by your project here, or alternatively use
        # pre-commit's default_language_version, see
        # https://pre-commit.com/#top_level-default_language_version
        language_version: python3.10
{% endif %}
  - repo: local
    hooks:
      - id: sphinx-build
        name: Build documentation with Sphinx
        entry: sphinx-build
        language: system
        always_run: true
        exclude_types: [file, symlink]
        args:
          [
            "-T", # Show full trace back on exception
            "-E", # Don't use saved env. always read all files.
            "-b", # Flag to select which builder to use
            "html", # Use the HTML builder
            "-d", # Flag for cached environment and doctrees
            "docs/build/doctrees", # directory
            "./docs", # Source directory of documents
            "docs/build/html", # Output directory for rendered documents.
          ]