{%- import 'python-versions.jinja' as py %}
# This workflow will install Python dependencies, run tests and report code coverage with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Unit test and code coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: {{ python_versions }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python {% raw %}${{ matrix.python-version }}{% endraw %}
      uses: actions/setup-python@v5
      with:
        python-version: {% raw %}${{ matrix.python-version }}{% endraw %}
    - name: Install dependencies
      run: |
        sudo apt-get update
        python -m pip install --upgrade pip
        pip install -e .[dev]
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Run unit tests with pytest
      run: |
        python -m pytest --cov={{package_name}} --cov-report=xml
    - name: Upload coverage report to codecov
      uses: codecov/codecov-action@v5
      with:
        token: {% raw %}${{ secrets.CODECOV_TOKEN }}{% endraw %}
{%- if test_lowest_version != 'none' %}
  test-lowest-versions:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python {{ py.min(python_versions)  }}
      uses: actions/setup-python@v5
      with:
        python-version: '{{ py.min(python_versions)  }}'
    - name: Install dependencies
      run: |
        sudo apt-get update
        python -m pip install --upgrade uv
        uv venv venv
        source venv/bin/activate
        {%- if test_lowest_version == 'direct' %}
        if [ -f requirements.txt ]; then
          uv pip compile --resolution=lowest-direct pyproject.toml requirements.txt -o requirements_lowest.txt
        else
          uv pip compile --resolution=lowest-direct pyproject.toml -o requirements_lowest.txt
        fi
        {%- elif test_lowest_version == 'all' %}
        if [ -f requirements.txt ]; then
          uv pip compile --resolution=lowest pyproject.toml requirements.txt -o requirements_lowest.txt
        else
            uv pip compile --resolution=lowest pyproject.toml -o requirements_lowest.txt
        fi
        {%- endif %}
        uv pip install --constraint=requirements_lowest.txt -e .[dev]
    - name: Run unit tests with pytest
      run: |
        source venv/bin/activate
        python -m pytest
{%- endif %}