{%- import 'python-versions.jinja' as py %}
[project]
name = "{{project_name}}"
{%- if project_license == 'BSD' %}
license = "BSD-3-Clause"
{%- elif project_license == 'MIT' %}
license = "MIT"
{%- elif project_license == 'GPL3' %}
license = "GPL-3.0-only"
{%- endif %}
{%- if project_license != 'none' %}
license-files = ["LICENSE"]
{%- endif %}
readme = "README.md"
authors = [
    { name = "{{author_name}}"{% if author_email %}, email = "{{author_email}}"{% endif %} }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
]
dynamic = ["version"]
requires-python = ">={{ py.min(python_versions)  }}"
dependencies = [
]

[project.urls]
"Source Code" = "https://github.com/{{project_organization}}/{{project_name}}"

# On a mac, install optional dependencies with `pip install '.[dev]'` (include the single quotes)
[project.optional-dependencies]
dev = [
{%- if include_benchmarks %}
    "asv==0.6.4", # Used to compute performance benchmarks
    "virtualenv==20.30", # Temporary fix to airspeed-velocity/asv#1484
{%- endif %}
{%- if 'black'  in enforce_style %}
    "black", # Used for static linting of files
{%- endif %}
    "jupyter", # Clears output from Jupyter notebooks
{%- if mypy_type_checking != 'none' %}
    "mypy", # Used for static type checking of files
{%- endif %}
    "pre-commit", # Used to run checks before finalizing a git commit
{%- if 'pylint' in enforce_style %}
    "pylint", # Used for static linting of files
{%- endif %}
    "pytest",
    "pytest-cov", # Used to report total code coverage
{%- if 'ruff_lint' in enforce_style or 'ruff_format' in enforce_style %}
    "ruff", # Used for static linting of files
{%- endif %}
]

[build-system]
requires = [
    "setuptools>=62", # Used to build and package the Python project
    "setuptools_scm>=6.2", # Gets release version from git. Makes it available programmatically
]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
write_to = "src/{{package_name}}/_version.py"

[tool.pytest.ini_options]
testpaths = [
    "tests",
    "src",
    "docs",
]
addopts = "--doctest-modules --doctest-glob=*.rst"

{% if 'black' in enforce_style -%}
[tool.black]
line-length = 110
target-version = ["py{{ py.min(python_versions) | replace(".", "") }}"]
{% endif -%}
{% if 'isort' in enforce_style -%}
[tool.isort]
profile = "black"
line_length = 110
{% endif -%}
{% if 'ruff_lint' in enforce_style or 'ruff_format' in enforce_style -%}
[tool.ruff]
line-length = 110
target-version = "py{{ py.min(python_versions) | replace(".", "") }}"
{% endif -%}
{% if 'ruff_lint' in enforce_style -%}
[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # pep8-naming
    "N",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # docstrings
    "D101",
    "D102",
    "D103",
    "D106",
    "D206",
    "D207",
    "D208",
    "D300",
    "D417",
    "D419",
    # Numpy v2.0 compatibility
    "NPY201",
]
ignore = [
    "UP006", # Allow non standard library generics in type hints
    "UP007", # Allow Union in type hints
    "SIM114", # Allow if with same arms
    "B028", # Allow default warning level
    "SIM117", # Allow nested with
    "UP015", # Allow redundant open parameters
    "UP028", # Allow yield in for loop
]
{% endif -%}

{%- if mypy_type_checking != 'none' %}
[tool.setuptools.package-data]
{{package_name}} = ["py.typed"]
{%- endif %}

[tool.coverage.run]
omit=["src/{{package_name}}/_version.py"]
